/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: f:\SPRainCore\bgc_sprain\bgc\module\canard\dsdl\uavcan\equipment\aux_data\103.AuxMeasure.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_AUX_DATA_AUXMEASURE
#define __UAVCAN_EQUIPMENT_AUX_DATA_AUXMEASURE

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Measure data with timestamps.
#
# THIS DEFINITION MAY BE CHANGED IN A NON-BACKWARD-COMPATIBLE WAY IN THE FUTURE.
#

#
# Aux data for ekf
#
float16[3] magnetic_field                   # magnetic field from flight control
float16[3] velocity_ms                      # velocity ms from flight control
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.aux_data.AuxMeasure
saturated float16[3] magnetic_field
saturated float16[3] velocity_ms
******************************************************************************/

#define UAVCAN_EQUIPMENT_AUX_DATA_AUXMEASURE_ID            103
#define UAVCAN_EQUIPMENT_AUX_DATA_AUXMEASURE_NAME          "uavcan.equipment.aux_data.AuxMeasure"
#define UAVCAN_EQUIPMENT_AUX_DATA_AUXMEASURE_SIGNATURE     (0xD6C05B4682DCCB72ULL)

#define UAVCAN_EQUIPMENT_AUX_DATA_AUXMEASURE_MAX_SIZE      ((96 + 7)/8)

// Constants

#define UAVCAN_EQUIPMENT_AUX_DATA_AUXMEASURE_MAGNETIC_FIELD_LENGTH                       3
#define UAVCAN_EQUIPMENT_AUX_DATA_AUXMEASURE_VELOCITY_MS_LENGTH                          3

typedef struct
{
    // FieldTypes
    float      magnetic_field[3];             // Static Array 16bit[3] max items
    float      velocity_ms[3];                // Static Array 16bit[3] max items

} uavcan_equipment_aux_data_AuxMeasure;

static inline
uint32_t uavcan_equipment_aux_data_AuxMeasure_encode(uavcan_equipment_aux_data_AuxMeasure* source, void* msg_buf);

static inline
int32_t uavcan_equipment_aux_data_AuxMeasure_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_aux_data_AuxMeasure* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t uavcan_equipment_aux_data_AuxMeasure_encode_internal(uavcan_equipment_aux_data_AuxMeasure* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t uavcan_equipment_aux_data_AuxMeasure_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_aux_data_AuxMeasure* dest, uint8_t** dyn_arr_buf, int32_t offset);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: f:\SPRainCore\bgc_sprain\bgc\module\canard\dsdl\uavcan\equipment\aux_data\103.AuxMeasure.uavcan
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief uavcan_equipment_aux_data_AuxMeasure_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t uavcan_equipment_aux_data_AuxMeasure_encode_internal(uavcan_equipment_aux_data_AuxMeasure* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    uint32_t c = 0;

    // Static array (magnetic_field)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 16, (void*)(source->magnetic_field + c)); // 32767
        offset += 16;
    }

    // Static array (velocity_ms)
    for (c = 0; c < 3; c++)
    {
        canardEncodeScalar(msg_buf, offset, 16, (void*)(source->velocity_ms + c)); // 32767
        offset += 16;
    }

    return offset;
}

/**
  * @brief uavcan_equipment_aux_data_AuxMeasure_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t uavcan_equipment_aux_data_AuxMeasure_encode(uavcan_equipment_aux_data_AuxMeasure* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = uavcan_equipment_aux_data_AuxMeasure_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief uavcan_equipment_aux_data_AuxMeasure_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_aux_data_AuxMeasure dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_aux_data_AuxMeasure_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  uavcan_equipment_aux_data_AuxMeasure* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset)
{
    int32_t ret = 0;
    uint32_t c = 0;

    // Static array (magnetic_field)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 16, false, (void*)(dest->magnetic_field + c));
        if (ret != 16)
        {
            goto uavcan_equipment_aux_data_AuxMeasure_error_exit;
        }
        offset += 16;
    }

    // Static array (velocity_ms)
    for (c = 0; c < 3; c++)
    {
        ret = canardDecodeScalar(transfer, offset, 16, false, (void*)(dest->velocity_ms + c));
        if (ret != 16)
        {
            goto uavcan_equipment_aux_data_AuxMeasure_error_exit;
        }
        offset += 16;
    }
    return offset;

uavcan_equipment_aux_data_AuxMeasure_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief uavcan_equipment_aux_data_AuxMeasure_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_aux_data_AuxMeasure dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_aux_data_AuxMeasure_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  uavcan_equipment_aux_data_AuxMeasure* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(uavcan_equipment_aux_data_AuxMeasure); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = uavcan_equipment_aux_data_AuxMeasure_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset);

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_AUX_DATA_AUXMEASURE