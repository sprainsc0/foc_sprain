/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: f:\SPRainCore\bgc_sprain\bgc\module\canard\dsdl\uavcan\equipment\device\1110.Temperature.uavcan
 */

#ifndef __UAVCAN_EQUIPMENT_DEVICE_TEMPERATURE
#define __UAVCAN_EQUIPMENT_DEVICE_TEMPERATURE

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Generic device temperature
#

uint16 device_id

float16 temperature                  # in kelvin

uint8 ERROR_FLAG_OVERHEATING = 1
uint8 ERROR_FLAG_OVERCOOLING = 2
uint8 error_flags
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.equipment.device.Temperature
saturated uint16 device_id
saturated float16 temperature
saturated uint8 error_flags
******************************************************************************/

#define UAVCAN_EQUIPMENT_DEVICE_TEMPERATURE_ID             1110
#define UAVCAN_EQUIPMENT_DEVICE_TEMPERATURE_NAME           "uavcan.equipment.device.Temperature"
#define UAVCAN_EQUIPMENT_DEVICE_TEMPERATURE_SIGNATURE      (0x70261C28A94144C6ULL)

#define UAVCAN_EQUIPMENT_DEVICE_TEMPERATURE_MAX_SIZE       ((40 + 7)/8)

// Constants
#define UAVCAN_EQUIPMENT_DEVICE_TEMPERATURE_ERROR_FLAG_OVERHEATING            1 // 1
#define UAVCAN_EQUIPMENT_DEVICE_TEMPERATURE_ERROR_FLAG_OVERCOOLING            2 // 2

typedef struct
{
    // FieldTypes
    uint16_t   device_id;                     // bit len 16
    float      temperature;                   // float16 Saturate
    uint8_t    error_flags;                   // bit len 8

} uavcan_equipment_device_Temperature;

static inline
uint32_t uavcan_equipment_device_Temperature_encode(uavcan_equipment_device_Temperature* source, void* msg_buf);

static inline
int32_t uavcan_equipment_device_Temperature_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_device_Temperature* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t uavcan_equipment_device_Temperature_encode_internal(uavcan_equipment_device_Temperature* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t uavcan_equipment_device_Temperature_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_equipment_device_Temperature* dest, uint8_t** dyn_arr_buf, int32_t offset);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: f:\SPRainCore\bgc_sprain\bgc\module\canard\dsdl\uavcan\equipment\device\1110.Temperature.uavcan
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief uavcan_equipment_device_Temperature_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t uavcan_equipment_device_Temperature_encode_internal(uavcan_equipment_device_Temperature* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
#ifndef CANARD_USE_FLOAT16_CAST
    uint16_t tmp_float = 0;
#else
    CANARD_USE_FLOAT16_CAST tmp_float = 0;
#endif

    canardEncodeScalar(msg_buf, offset, 16, (void*)&source->device_id); // 65535
    offset += 16;

    // float16 special handling
#ifndef CANARD_USE_FLOAT16_CAST
    tmp_float = canardConvertNativeFloatToFloat16(source->temperature);
#else
    tmp_float = (CANARD_USE_FLOAT16_CAST)source->temperature;
#endif
    canardEncodeScalar(msg_buf, offset, 16, (void*)&tmp_float); // 32767
    offset += 16;
    canardEncodeScalar(msg_buf, offset, 8, (void*)&source->error_flags); // 255
    offset += 8;

    return offset;
}

/**
  * @brief uavcan_equipment_device_Temperature_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t uavcan_equipment_device_Temperature_encode(uavcan_equipment_device_Temperature* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = uavcan_equipment_device_Temperature_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief uavcan_equipment_device_Temperature_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_device_Temperature dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_device_Temperature_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  uavcan_equipment_device_Temperature* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset)
{
    int32_t ret = 0;
#ifndef CANARD_USE_FLOAT16_CAST
    uint16_t tmp_float = 0;
#else
    CANARD_USE_FLOAT16_CAST tmp_float = 0;
#endif

    ret = canardDecodeScalar(transfer, offset, 16, false, (void*)&dest->device_id);
    if (ret != 16)
    {
        goto uavcan_equipment_device_Temperature_error_exit;
    }
    offset += 16;

    // float16 special handling
    ret = canardDecodeScalar(transfer, offset, 16, false, (void*)&tmp_float);

    if (ret != 16)
    {
        goto uavcan_equipment_device_Temperature_error_exit;
    }
#ifndef CANARD_USE_FLOAT16_CAST
    dest->temperature = canardConvertFloat16ToNativeFloat(tmp_float);
#else
    dest->temperature = (float)tmp_float;
#endif
    offset += 16;

    ret = canardDecodeScalar(transfer, offset, 8, false, (void*)&dest->error_flags);
    if (ret != 8)
    {
        goto uavcan_equipment_device_Temperature_error_exit;
    }
    offset += 8;
    return offset;

uavcan_equipment_device_Temperature_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief uavcan_equipment_device_Temperature_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_equipment_device_Temperature dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_equipment_device_Temperature_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  uavcan_equipment_device_Temperature* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(uavcan_equipment_device_Temperature); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = uavcan_equipment_device_Temperature_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset);

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_EQUIPMENT_DEVICE_TEMPERATURE