/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: f:\SPRainCore\bgc_sprain\bgc\module\canard\dsdl\uavcan\tunnel\63.Call.uavcan
 */

#ifndef __UAVCAN_TUNNEL_CALL
#define __UAVCAN_TUNNEL_CALL

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

#include <uavcan\tunnel\Protocol.h>

/******************************* Source text **********************************
#
# This service carries arbitrary data in the format of the specified high-level protocol.
# The data will be delivered to the specified node only (not broadcast), and the addressed node
# will be required to respond (although the response may be empty, if the chosen protocol allows so).
# The specified protocol applies both to the request and to the response. The channelID allows for
# additional routing between the source and target nodes.
#

Protocol protocol
uint8 channel_id

uint8[<=60] buffer    # TAO rules apply

---

uint8[<=60] buffer    # TAO rules apply
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.tunnel.Call
uavcan.tunnel.Protocol protocol
saturated uint8 channel_id
saturated uint8[<=60] buffer
---
saturated uint8[<=60] buffer
******************************************************************************/

#define UAVCAN_TUNNEL_CALL_ID                              63
#define UAVCAN_TUNNEL_CALL_NAME                            "uavcan.tunnel.Call"
#define UAVCAN_TUNNEL_CALL_SIGNATURE                       (0xDB11EDC510502658ULL)

#define UAVCAN_TUNNEL_CALL_REQUEST_MAX_SIZE                ((502 + 7)/8)

// Constants

#define UAVCAN_TUNNEL_CALL_REQUEST_BUFFER_MAX_LENGTH                                     60

typedef struct
{
    // FieldTypes
    uavcan_tunnel_Protocol protocol;                      //
    uint8_t    channel_id;                    // bit len 8
    struct
    {
        uint8_t    len;                       // Dynamic array length
        uint8_t*   data;                      // Dynamic Array 8bit[60] max items
    } buffer;

} uavcan_tunnel_CallRequest;

static inline
uint32_t uavcan_tunnel_CallRequest_encode(uavcan_tunnel_CallRequest* source, void* msg_buf);

static inline
int32_t uavcan_tunnel_CallRequest_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_tunnel_CallRequest* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t uavcan_tunnel_CallRequest_encode_internal(uavcan_tunnel_CallRequest* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t uavcan_tunnel_CallRequest_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_tunnel_CallRequest* dest, uint8_t** dyn_arr_buf, int32_t offset);

#define UAVCAN_TUNNEL_CALL_RESPONSE_MAX_SIZE               ((486 + 7)/8)

// Constants

#define UAVCAN_TUNNEL_CALL_RESPONSE_BUFFER_MAX_LENGTH                                    60

typedef struct
{
    // FieldTypes
    struct
    {
        uint8_t    len;                       // Dynamic array length
        uint8_t*   data;                      // Dynamic Array 8bit[60] max items
    } buffer;

} uavcan_tunnel_CallResponse;

static inline
uint32_t uavcan_tunnel_CallResponse_encode(uavcan_tunnel_CallResponse* source, void* msg_buf);

static inline
int32_t uavcan_tunnel_CallResponse_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_tunnel_CallResponse* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t uavcan_tunnel_CallResponse_encode_internal(uavcan_tunnel_CallResponse* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t uavcan_tunnel_CallResponse_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_tunnel_CallResponse* dest, uint8_t** dyn_arr_buf, int32_t offset);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: f:\SPRainCore\bgc_sprain\bgc\module\canard\dsdl\uavcan\tunnel\63.Call.uavcan
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief uavcan_tunnel_CallRequest_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t uavcan_tunnel_CallRequest_encode_internal(uavcan_tunnel_CallRequest* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    uint32_t c = 0;

    // Compound
    offset = uavcan_tunnel_Protocol_encode_internal(&source->protocol, msg_buf, offset, 0);
    canardEncodeScalar(msg_buf, offset, 8, (void*)&source->channel_id); // 255
    offset += 8;

    // Dynamic Array (buffer)
    if (! root_item)
    {
        // - Add array length
        canardEncodeScalar(msg_buf, offset, 6, (void*)&source->buffer.len);
        offset += 6;
    }

    // - Add array items
    for (c = 0; c < source->buffer.len; c++)
    {
        canardEncodeScalar(msg_buf,
                           offset,
                           8,
                           (void*)(source->buffer.data + c));// 255
        offset += 8;
    }

    return offset;
}

/**
  * @brief uavcan_tunnel_CallRequest_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t uavcan_tunnel_CallRequest_encode(uavcan_tunnel_CallRequest* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = uavcan_tunnel_CallRequest_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief uavcan_tunnel_CallRequest_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_tunnel_CallRequest dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_tunnel_CallRequest_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  uavcan_tunnel_CallRequest* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset)
{
    int32_t ret = 0;
    uint32_t c = 0;

    // Compound
    offset = uavcan_tunnel_Protocol_decode_internal(transfer, 0, &dest->protocol, dyn_arr_buf, offset);
    if (offset < 0)
    {
        ret = offset;
        goto uavcan_tunnel_CallRequest_error_exit;
    }

    ret = canardDecodeScalar(transfer, offset, 8, false, (void*)&dest->channel_id);
    if (ret != 8)
    {
        goto uavcan_tunnel_CallRequest_error_exit;
    }
    offset += 8;

    // Dynamic Array (buffer)
    //  - Last item in struct & Root item & (Array Size > 8 bit), tail array optimization
    if (payload_len)
    {
        //  - Calculate Array length from MSG length
        dest->buffer.len = ((payload_len * 8) - offset ) / 8; // 8 bit array item size
    }
    else
    {
        // - Array length 6 bits
        ret = canardDecodeScalar(transfer,
                                 offset,
                                 6,
                                 false,
                                 (void*)&dest->buffer.len); // 255
        if (ret != 6)
        {
            goto uavcan_tunnel_CallRequest_error_exit;
        }
        offset += 6;
    }

    //  - Get Array
    if (dyn_arr_buf)
    {
        dest->buffer.data = (uint8_t*)*dyn_arr_buf;
    }

    for (c = 0; c < dest->buffer.len; c++)
    {
        if (dyn_arr_buf)
        {
            ret = canardDecodeScalar(transfer,
                                     offset,
                                     8,
                                     false,
                                     (void*)*dyn_arr_buf); // 255
            if (ret != 8)
            {
                goto uavcan_tunnel_CallRequest_error_exit;
            }
            *dyn_arr_buf = (uint8_t*)(((uint8_t*)*dyn_arr_buf) + 1);
        }
        offset += 8;
    }
    return offset;

uavcan_tunnel_CallRequest_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief uavcan_tunnel_CallRequest_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_tunnel_CallRequest dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_tunnel_CallRequest_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  uavcan_tunnel_CallRequest* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(uavcan_tunnel_CallRequest); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = uavcan_tunnel_CallRequest_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset);

    return ret;
}

/**
  * @brief uavcan_tunnel_CallResponse_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t uavcan_tunnel_CallResponse_encode_internal(uavcan_tunnel_CallResponse* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    uint32_t c = 0;

    // Dynamic Array (buffer)
    if (! root_item)
    {
        // - Add array length
        canardEncodeScalar(msg_buf, offset, 6, (void*)&source->buffer.len);
        offset += 6;
    }

    // - Add array items
    for (c = 0; c < source->buffer.len; c++)
    {
        canardEncodeScalar(msg_buf,
                           offset,
                           8,
                           (void*)(source->buffer.data + c));// 255
        offset += 8;
    }

    return offset;
}

/**
  * @brief uavcan_tunnel_CallResponse_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t uavcan_tunnel_CallResponse_encode(uavcan_tunnel_CallResponse* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = uavcan_tunnel_CallResponse_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief uavcan_tunnel_CallResponse_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_tunnel_CallResponse dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_tunnel_CallResponse_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  uavcan_tunnel_CallResponse* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset)
{
    int32_t ret = 0;
    uint32_t c = 0;

    // Dynamic Array (buffer)
    //  - Last item in struct & Root item & (Array Size > 8 bit), tail array optimization
    if (payload_len)
    {
        //  - Calculate Array length from MSG length
        dest->buffer.len = ((payload_len * 8) - offset ) / 8; // 8 bit array item size
    }
    else
    {
        // - Array length 6 bits
        ret = canardDecodeScalar(transfer,
                                 offset,
                                 6,
                                 false,
                                 (void*)&dest->buffer.len); // 255
        if (ret != 6)
        {
            goto uavcan_tunnel_CallResponse_error_exit;
        }
        offset += 6;
    }

    //  - Get Array
    if (dyn_arr_buf)
    {
        dest->buffer.data = (uint8_t*)*dyn_arr_buf;
    }

    for (c = 0; c < dest->buffer.len; c++)
    {
        if (dyn_arr_buf)
        {
            ret = canardDecodeScalar(transfer,
                                     offset,
                                     8,
                                     false,
                                     (void*)*dyn_arr_buf); // 255
            if (ret != 8)
            {
                goto uavcan_tunnel_CallResponse_error_exit;
            }
            *dyn_arr_buf = (uint8_t*)(((uint8_t*)*dyn_arr_buf) + 1);
        }
        offset += 8;
    }
    return offset;

uavcan_tunnel_CallResponse_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief uavcan_tunnel_CallResponse_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_tunnel_CallResponse dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_tunnel_CallResponse_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  uavcan_tunnel_CallResponse* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(uavcan_tunnel_CallResponse); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = uavcan_tunnel_CallResponse_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset);

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_TUNNEL_CALL