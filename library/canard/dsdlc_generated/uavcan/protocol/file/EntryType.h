/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: f:\SPRainCore\bgc_sprain\bgc\module\canard\dsdl\uavcan\protocol\file\EntryType.uavcan
 */

#ifndef __UAVCAN_PROTOCOL_FILE_ENTRYTYPE
#define __UAVCAN_PROTOCOL_FILE_ENTRYTYPE

#include <stdint.h>
#include "canard.h"

#ifdef __cplusplus
extern "C"
{
#endif

/******************************* Source text **********************************
#
# Nested type.
# Represents the type of the file system entry (e.g. file or directory).
# If such entry does not exist, 'flags' must be set to zero.
#

uint8 FLAG_FILE      = 1        # Excludes FLAG_DIRECTORY
uint8 FLAG_DIRECTORY = 2        # Excludes FLAG_FILE
uint8 FLAG_SYMLINK   = 4        # Link target is either FLAG_FILE or FLAG_DIRECTORY
uint8 FLAG_READABLE  = 8
uint8 FLAG_WRITEABLE = 16

uint8 flags
******************************************************************************/

/********************* DSDL signature source definition ***********************
uavcan.protocol.file.EntryType
saturated uint8 flags
******************************************************************************/

#define UAVCAN_PROTOCOL_FILE_ENTRYTYPE_NAME                "uavcan.protocol.file.EntryType"
#define UAVCAN_PROTOCOL_FILE_ENTRYTYPE_SIGNATURE           (0x6924572FBB2086E5ULL)

#define UAVCAN_PROTOCOL_FILE_ENTRYTYPE_MAX_SIZE            ((8 + 7)/8)

// Constants
#define UAVCAN_PROTOCOL_FILE_ENTRYTYPE_FLAG_FILE                              1 // 1
#define UAVCAN_PROTOCOL_FILE_ENTRYTYPE_FLAG_DIRECTORY                         2 // 2
#define UAVCAN_PROTOCOL_FILE_ENTRYTYPE_FLAG_SYMLINK                           4 // 4
#define UAVCAN_PROTOCOL_FILE_ENTRYTYPE_FLAG_READABLE                          8 // 8
#define UAVCAN_PROTOCOL_FILE_ENTRYTYPE_FLAG_WRITEABLE                        16 // 16

typedef struct
{
    // FieldTypes
    uint8_t    flags;                         // bit len 8

} uavcan_protocol_file_EntryType;

static inline
uint32_t uavcan_protocol_file_EntryType_encode(uavcan_protocol_file_EntryType* source, void* msg_buf);

static inline
int32_t uavcan_protocol_file_EntryType_decode(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_protocol_file_EntryType* dest, uint8_t** dyn_arr_buf);

static inline
uint32_t uavcan_protocol_file_EntryType_encode_internal(uavcan_protocol_file_EntryType* source, void* msg_buf, uint32_t offset, uint8_t root_item);

static inline
int32_t uavcan_protocol_file_EntryType_decode_internal(const CanardRxTransfer* transfer, uint16_t payload_len, uavcan_protocol_file_EntryType* dest, uint8_t** dyn_arr_buf, int32_t offset);

/*
 * UAVCAN data structure definition for libcanard.
 *
 * Autogenerated, do not edit.
 *
 * Source file: f:\SPRainCore\bgc_sprain\bgc\module\canard\dsdl\uavcan\protocol\file\EntryType.uavcan
 */

#ifndef CANARD_INTERNAL_SATURATE
#define CANARD_INTERNAL_SATURATE(x, max) ( ((x) > max) ? max : ( (-(x) > max) ? (-max) : (x) ) );
#endif

#ifndef CANARD_INTERNAL_SATURATE_UNSIGNED
#define CANARD_INTERNAL_SATURATE_UNSIGNED(x, max) ( ((x) > max) ? max : (x) );
#endif

#if defined(__GNUC__)
# define CANARD_MAYBE_UNUSED(x) x __attribute__((unused))
#else
# define CANARD_MAYBE_UNUSED(x) x
#endif

/**
  * @brief uavcan_protocol_file_EntryType_encode_internal
  * @param source : pointer to source data struct
  * @param msg_buf: pointer to msg storage
  * @param offset: bit offset to msg storage
  * @param root_item: for detecting if TAO should be used
  * @retval returns offset
  */
uint32_t uavcan_protocol_file_EntryType_encode_internal(uavcan_protocol_file_EntryType* source,
  void* msg_buf,
  uint32_t offset,
  uint8_t CANARD_MAYBE_UNUSED(root_item))
{
    canardEncodeScalar(msg_buf, offset, 8, (void*)&source->flags); // 255
    offset += 8;

    return offset;
}

/**
  * @brief uavcan_protocol_file_EntryType_encode
  * @param source : Pointer to source data struct
  * @param msg_buf: Pointer to msg storage
  * @retval returns message length as bytes
  */
uint32_t uavcan_protocol_file_EntryType_encode(uavcan_protocol_file_EntryType* source, void* msg_buf)
{
    uint32_t offset = 0;

    offset = uavcan_protocol_file_EntryType_encode_internal(source, msg_buf, offset, 1);

    return (offset + 7 ) / 8;
}

/**
  * @brief uavcan_protocol_file_EntryType_decode_internal
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_protocol_file_EntryType dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @param offset: Call with 0, bit offset to msg storage
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_protocol_file_EntryType_decode_internal(
  const CanardRxTransfer* transfer,
  uint16_t CANARD_MAYBE_UNUSED(payload_len),
  uavcan_protocol_file_EntryType* dest,
  uint8_t** CANARD_MAYBE_UNUSED(dyn_arr_buf),
  int32_t offset)
{
    int32_t ret = 0;

    ret = canardDecodeScalar(transfer, offset, 8, false, (void*)&dest->flags);
    if (ret != 8)
    {
        goto uavcan_protocol_file_EntryType_error_exit;
    }
    offset += 8;
    return offset;

uavcan_protocol_file_EntryType_error_exit:
    if (ret < 0)
    {
        return ret;
    }
    else
    {
        return -CANARD_ERROR_INTERNAL;
    }
}

/**
  * @brief uavcan_protocol_file_EntryType_decode
  * @param transfer: Pointer to CanardRxTransfer transfer
  * @param payload_len: Payload message length
  * @param dest: Pointer to destination struct
  * @param dyn_arr_buf: NULL or Pointer to memory storage to be used for dynamic arrays
  *                     uavcan_protocol_file_EntryType dyn memory will point to dyn_arr_buf memory.
  *                     NULL will ignore dynamic arrays decoding.
  * @retval offset or ERROR value if < 0
  */
int32_t uavcan_protocol_file_EntryType_decode(const CanardRxTransfer* transfer,
  uint16_t payload_len,
  uavcan_protocol_file_EntryType* dest,
  uint8_t** dyn_arr_buf)
{
    const int32_t offset = 0;
    int32_t ret = 0;

    // Clear the destination struct
    for (uint32_t c = 0; c < sizeof(uavcan_protocol_file_EntryType); c++)
    {
        ((uint8_t*)dest)[c] = 0x00;
    }

    ret = uavcan_protocol_file_EntryType_decode_internal(transfer, payload_len, dest, dyn_arr_buf, offset);

    return ret;
}

#ifdef __cplusplus
} // extern "C"
#endif
#endif // __UAVCAN_PROTOCOL_FILE_ENTRYTYPE